// ===== ZAPYTANIA GROQ DLA AI-DRIVEN OPERATING PROCEDURES =====

// 1. Pobierz wszystkie AIOP z pełną strukturą
*[_type == "aiop"] | order(name asc) {
  _id,
  name,
  subtitle,
  image,
  icon,
  courses[]{
    _key,
    part,
    subject,
    desc,
    icon,
    body[]{
      _key,
      title,
      icon,
      image,
      content
    }
  },
  _createdAt,
  _updatedAt
}

// 2. Pobierz jeden AIOP po ID z pełną strukturą
*[_type == "aiop" && _id == "AIOP_ID"][0] {
  _id,
  name,
  subtitle,
  image,
  icon,
  courses[]{
    _key,
    part,
    subject,
    desc,
    icon,
    body[]{
      _key,
      title,
      icon,
      image,
      content
    }
  },
  _createdAt,
  _updatedAt
}

// 3. Pobierz tylko podstawowe informacje o AIOP (bez zagnieżdżonych danych)
*[_type == "aiop"] | order(name asc) {
  _id,
  name,
  subtitle,
  image,
  icon,
  "coursesCount": count(courses),
  _createdAt,
  _updatedAt
}

// 4. Wyszukiwanie AIOP po nazwie lub podtytule
*[_type == "aiop" && (
  name match "*SEARCH_TERM*" ||
  subtitle match "*SEARCH_TERM*"
)] | order(name asc) {
  _id,
  name,
  subtitle,
  image,
  icon,
  courses[]{
    _key,
    part,
    subject,
    desc,
    icon,
    body[]{
      _key,
      title,
      icon,
      image,
      content
    }
  },
  _createdAt,
  _updatedAt
}

// 5. Pobierz AIOP z konkretnym kursem (po części)
*[_type == "aiop" && "PART_NAME" in courses[].part] {
  _id,
  name,
  subtitle,
  image,
  icon,
  courses[part == "PART_NAME"]{
    _key,
    part,
    subject,
    desc,
    icon,
    body[]{
      _key,
      title,
      icon,
      image,
      content
    }
  },
  _createdAt,
  _updatedAt
}

// 6. Pobierz tylko kursy z konkretnego AIOP
*[_type == "aiop" && _id == "AIOP_ID"][0].courses[]{
  _key,
  part,
  subject,
  desc,
  icon,
  body[]{
    _key,
    title,
    icon,
    image,
    content
  }
}

// 7. Pobierz tylko elementy body z konkretnego kursu AIOP
*[_type == "aiop" && _id == "AIOP_ID"][0].courses[_key == "COURSE_KEY"][0].body[]{
  _key,
  title,
  icon,
  image,
  content
}

// 8. Statystyki AIOP
{
  "totalAiop": count(*[_type == "aiop"]),
  "totalCourses": count(*[_type == "aiop"].courses[]),
  "totalBodyItems": count(*[_type == "aiop"].courses[].body[]),
  "aiopWithMostCourses": *[_type == "aiop"] | order(count(courses) desc)[0] {
    name,
    "coursesCount": count(courses)
  }
}

// 9. Pobierz najnowsze AIOP (ostatnio utworzone)
*[_type == "aiop"] | order(_createdAt desc)[0..4] {
  _id,
  name,
  subtitle,
  image,
  icon,
  "coursesCount": count(courses),
  _createdAt,
  _updatedAt
}

// 10. Pobierz AIOP z obrazkami (tylko te które mają obrazek)
*[_type == "aiop" && defined(image)] {
  _id,
  name,
  subtitle,
  image,
  icon,
  courses[]{
    _key,
    part,
    subject,
    desc,
    icon,
    body[]{
      _key,
      title,
      icon,
      image,
      content
    }
  },
  _createdAt,
  _updatedAt
}

// 11. Pobierz unikalne części (parts) z wszystkich AIOP
array::unique(*[_type == "aiop"].courses[].part)

// 12. Pobierz AIOP pogrupowane po ikonach
*[_type == "aiop"] | order(icon asc) {
  _id,
  name,
  subtitle,
  icon,
  "coursesCount": count(courses)
} | group(icon)

// 13. Pobierz konkretny element body z AIOP
*[_type == "aiop"] {
  _id,
  name,
  courses[]{
    _key,
    subject,
    body[title match "*SEARCH_TITLE*"]{
      _key,
      title,
      icon,
      image,
      content
    }
  }
}[count(courses[].body) > 0]

// 14. Pobierz AIOP z informacją o liczbie elementów
*[_type == "aiop"] | order(name asc) {
  _id,
  name,
  subtitle,
  image,
  icon,
  "coursesCount": count(courses),
  "totalBodyItems": count(courses[].body[]),
  courses[]{
    _key,
    part,
    subject,
    desc,
    icon,
    "bodyItemsCount": count(body),
    body[]{
      _key,
      title,
      icon,
      image,
      content
    }
  },
  _createdAt,
  _updatedAt
}

// 15. Pobierz AIOP z paginacją
*[_type == "aiop"] | order(name asc) [0..9] {
  _id,
  name,
  subtitle,
  image,
  icon,
  "coursesCount": count(courses),
  _createdAt,
  _updatedAt
}

// 16. Wyszukiwanie w treści body items
*[_type == "aiop"] {
  _id,
  name,
  subtitle,
  courses[]{
    _key,
    subject,
    body[pt::text(content) match "*SEARCH_CONTENT*"]{
      _key,
      title,
      icon,
      image,
      content
    }
  }
}[count(courses[].body) > 0]

// 17. Pobierz AIOP z ostatnio zaktualizowanymi kursami
*[_type == "aiop"] | order(_updatedAt desc) {
  _id,
  name,
  subtitle,
  image,
  icon,
  courses[]{
    _key,
    part,
    subject,
    desc,
    icon,
    body[]{
      _key,
      title,
      icon,
      image,
      content
    }
  },
  _createdAt,
  _updatedAt
}

// 18. Pobierz tylko AIOP z określoną liczbą kursów
*[_type == "aiop" && count(courses) >= 3] {
  _id,
  name,
  subtitle,
  "coursesCount": count(courses),
  courses[]{
    _key,
    part,
    subject,
    desc,
    icon
  }
}

// 19. Eksport wszystkich danych AIOP (pełna struktura)
*[_type == "aiop"] {
  _id,
  _type,
  _createdAt,
  _updatedAt,
  _rev,
  name,
  subtitle,
  image,
  icon,
  courses[]{
    _key,
    _type,
    part,
    subject,
    desc,
    icon,
    body[]{
      _key,
      _type,
      title,
      icon,
      image,
      content
    }
  }
}

// 20. Sprawdź integralność danych AIOP
*[_type == "aiop"] {
  _id,
  name,
  "hasSubtitle": defined(subtitle),
  "hasImage": defined(image),
  "hasIcon": defined(icon),
  "coursesCount": count(courses),
  "coursesWithoutBody": count(courses[count(body) == 0]),
  "totalBodyItems": count(courses[].body[]),
  "bodyItemsWithoutContent": count(courses[].body[!defined(content) || count(content) == 0])
} 